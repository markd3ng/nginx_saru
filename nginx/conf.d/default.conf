# HTTP server - redirect to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Redirect all HTTP requests to HTTPS with HTTP/3
    return 301 https://$host$request_uri;
}

# HTTPS server with HTTP/3
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    listen 443 quic reuseport;
    listen [::]:443 quic reuseport;
    server_name _;

    # SSL Configuration
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;
    
    # HTTP/3 and QUIC Alt-Svc header
    add_header Alt-Svc 'h3=":443"; ma=86400, h3-29=":443"; ma=86400';
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Document root
    root /var/www/html;
    index index.html index.htm;

    # Enable compression
    brotli_static on;
    gzip_static on;
    zstd_static on;

    # Main location
    location / {
        try_files $uri $uri/ =404;
        
        # Cache static assets
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
        }
        
        # HTML files - no cache
        location ~* \.html$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Nginx status (optional - uncomment if needed)
    # location /nginx_status {
    #     stub_status on;
    #     access_log off;
    #     allow 127.0.0.1;
    #     allow 10.0.0.0/8;
    #     deny all;
    # }

    # Security - deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~* \.(conf|log|sql|ini)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Rate limiting for API endpoints
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        try_files $uri $uri/ =404;
    }

    # Rate limiting for login endpoints
    location /login {
        limit_req zone=login burst=5 nodelay;
        try_files $uri $uri/ =404;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /var/www/html;
    }
}

# Example server with GeoIP2 blocking
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#     listen 443 quic reuseport;
#     listen [::]:443 quic reuseport;
#     server_name example.com;
# 
#     ssl_certificate /etc/nginx/certs/example.com.crt;
#     ssl_certificate_key /etc/nginx/certs/example.com.key;
#     
#     add_header Alt-Svc 'h3=":443"; ma=86400, h3-29=":443"; ma=86400';
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
# 
#     # Block specific countries
#     if ($geoip2_data_country_code = CN) {
#         return 403;
#     }
# 
#     root /var/www/example.com;
#     index index.html;
# 
#     location / {
#         try_files $uri $uri/ =404;
#     }
# }